plugins {
    id 'org.springframework.boot' version '1.5.6.RELEASE'
    id 'org.hidetake.ssh' version '2.7.0'
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: "jacoco"
apply plugin: 'maven-publish'
apply plugin: 'application'

sourceCompatibility = 1.8

group = 'uk.ac.ebi.ena'
archivesBaseName = 'ena-cram-processing-tools'
version='1.0.0'
mainClassName = 'net.sf.cram.CramTools'



bootRun.systemProperties = System.properties

repositories {
    mavenLocal()
    maven { url "http://ena-dev:8081/artifactory/all" }
    mavenCentral()
}

dependencies {
    compile 'com.github.samtools:htsjdk:2.10.1'    
    compile 'org.apache.commons:commons-compress:1.9'   
    compile 'com.beust:jcommander:1.48'   
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.0.2'
}

jar.manifest {
    attributes('Implementation-Title': project.name,
            'Implementation-Version': project.version,
            'Source-Compatibility': project.sourceCompatibility
    )
}

task sourceJar(type: Jar) {
    from sourceSets.main.allJava
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact sourceJar {
                classifier "sources"
            }
        }
    }
    repositories {
        maven {
            credentials {
                username = 'alexanderv' 
                password = 'IhatePasswords2017' 
            }
            url "http://ena-dev:8081/artifactory/libs-release-local"
        }
    }
}

remotes {
    dev {
        host = 'ebi-cli-001'
        user = 'era'
        identity = file("${System.properties['user.home']}/.ssh/id_rsa")
        knownHosts = allowAnyHosts
    }
    test {
        host = 'ebi-cli-001'
        user = 'era'
        identity = file("${System.properties['user.home']}/.ssh/id_rsa")
        knownHosts = allowAnyHosts
    }
    prod {
        host = 'ebi-cli-001'
        user = 'era'
        identity = file("${System.properties['user.home']}/.ssh/id_rsa")
        knownHosts = allowAnyHosts
    }
}

/*
task deployToDev << {
    ssh.run {
        session(remotes.dev) {
            execute "~TODO_PULL_FROM_ARTIFACTORY_AND_COPY_TO_DEV_LOCATION"
        }
    }
}

task deployToTest << {
    ssh.run {
        session(remotes.test) {
            execute "~TODO_PULL_FROM_ARTIFACTORY_AND_COPY_TO_TEST_LOCATION"
        }
    }
}

task deployToProd << {
    ssh.run {
        session(remotes.prod) {
            execute "~TODO_PULL_FROM_ARTIFACTORY_AND_COPY_TO_PROD_LOCATION"
        }
    }    
} 
*/

sourceSets {
	main {
		java {
			srcDir 'src'			
		}

		resources {
		  srcDir 'resources'
    	}
	}
	

}